var documenterSearchIndex = {"docs":
[{"location":"toc/#Table-of-contents","page":"Table of Contents","title":"Table of contents","text":"","category":"section"},{"location":"toc/","page":"Table of Contents","title":"Table of Contents","text":"Depth = 4","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"D. J. Gunn. Transfer of heat or mass to particles in fixed and fluidised beds. International Journal of Heat and Mass Transfer 21, 467–476 (1978).\n\n\n\nH. Kramers and P. Croockewit. The passage of granular solids through inclined rotary kilns. Chemical Engineering Science 1, 259–265 (1952).\n\n\n\n","category":"page"},{"location":"api/#Reference-API","page":"Reference API","title":"Reference API","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"In this page you find a list of all documented functions of DryTooling. Rather than being organized in a logical way as the main documentation, we chose (except for the root DryTooling that comes first) to list them in alphabetical order of folders in source directory.","category":"page"},{"location":"api/#DryToolingCore.jl","page":"Reference API","title":"DryToolingCore.jl","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryToolingCore ]","category":"page"},{"location":"api/#DryToolingGranular.jl","page":"Reference API","title":"DryToolingGranular.jl","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryToolingGranular ]","category":"page"},{"location":"dev/#Developement","page":"Developement","title":"Developement","text":"","category":"section"},{"location":"dev/","page":"Developement","title":"Developement","text":"DryTooling is an unpublished rolling release package set composed of several sub-packages currently not following any versioning semantics. That means that new features are added and only the commits track differences. This is temporary and will be modified when all the old code base that is giving origing to the package is migrated here. Nonetheless, the package will probably not be published to Julia registries because of the way its governance works. DryTooling tries to be self-contained in several aspects because of the needs of perfect integration between functionalities of several of its foreseen end applications. That is currently incompatible with using some of the state-of-the-art packages from Julia ecosystem.","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"This page aims at providing a tutorial for managing DryTooling.","category":"page"},{"location":"dev/#Adding-new-packages","page":"Developement","title":"Adding new packages","text":"","category":"section"},{"location":"dev/","page":"Developement","title":"Developement","text":"To add a new package to the framework launch a terminal under the src/ directory of the parent repository and state a julia REPL. Then change to pkg> mode by pressing ] and run generate DryTooling<package-name>.jl, where you should replace the <package-name> by the actual package's name.","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Packages must use cammel-case naming scheme and start with DryTooling.\nDo not forget to add a .jl to the end of the package name.","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"This will create a subdirectory with the given package name and its own src/ directory and Project.toml file.","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Next you need to add the package to the documentation workflow. In section Install dependencies of .github/workflows/documentation.yaml add the following line (constant URL is defined in workflow):","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Pkg.develop(url=URL, subdir=\"src/DryTooling<package-name>.jl\");","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Also update docs/make.jl following the pattern for existing sub-packages, i.e, add the package name without .jl extension to global DRYTOOLING and below, with other subpackages, add a using directive for the package. Keep packages in alphabetical order as displayed in file explorer for ease of verification.","category":"page"},{"location":"dev/#Generating-the-documentation","page":"Developement","title":"Generating the documentation","text":"","category":"section"},{"location":"dev/","page":"Developement","title":"Developement","text":"Documentation is generated by a GitHub Actions workflow at every commit to the main branch.","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Because of the multiple package in a repository structure, this documentation follows intrinsically a rolling release logic. Because the packages are not registered, they also do not appear in the docs/Project.toml. So it is up to the maintainers to ensure that section [deps] of docs/Project.toml points to ALL dependencies of ALL subpackages. ","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"For generating the documentation locally, from a Julia session running from docs/ , this is automalically done when variable LOCALDOCS = true in make.jl and the following is done in the REPL:","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"(@v1.9) pkg> activate .\n  Activating project at `D:\\DryTooling.jl\\docs`\n\njulia> include(\"make.jl\")\n   Resolving package versions...\n   ...","category":"page"},{"location":"dev/","page":"Developement","title":"Developement","text":"Notice that this will backup docs/Project.toml and revert changes automatically. If the process fails, DO NOT commit changes to docs/Project.toml, otherwise GitHub Actions workflow will fail (because packages are not registered).","category":"page"},{"location":"DryToolingKinetics/#DryToolingKinetics","page":"Kinetics","title":"DryToolingKinetics","text":"","category":"section"},{"location":"DryToolingKinetics/","page":"Kinetics","title":"Kinetics","text":"CurrentModule = DryToolingKinetics\nDocTestSetup  = quote\n    using DryToolingKinetics\nend","category":"page"},{"location":"DryToolingCore/abstract/#Abstract-types","page":"Abstract types","title":"Abstract types","text":"","category":"section"},{"location":"DryToolingCore/abstract/#Problem-solving-and-physical-models","page":"Abstract types","title":"Problem solving and physical models","text":"","category":"section"},{"location":"DryToolingCore/abstract/","page":"Abstract types","title":"Abstract types","text":"DryToolingCore.AbstractMatrixProblem\nDryToolingCore.AbstractIterativeSolver\nDryToolingCore.AbstractSolutionStorage\nDryToolingCore.AbstractPhysicalModel","category":"page"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractMatrixProblem","page":"Abstract types","title":"DryToolingCore.AbstractMatrixProblem","text":"Base type for linear algebra problems.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractIterativeSolver","page":"Abstract types","title":"DryToolingCore.AbstractIterativeSolver","text":"Base type for (nonlinear) iterative solvers.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractSolutionStorage","page":"Abstract types","title":"DryToolingCore.AbstractSolutionStorage","text":"Base type for storing simulation solution.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractPhysicalModel","page":"Abstract types","title":"DryToolingCore.AbstractPhysicalModel","text":"Base type for physical models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#Transport,-thermodynamics,-and-kinetics","page":"Abstract types","title":"Transport, thermodynamics, and kinetics","text":"","category":"section"},{"location":"DryToolingCore/abstract/","page":"Abstract types","title":"Abstract types","text":"DryToolingCore.AbstractTransportModel\nDryToolingCore.AbstractSolidTransport\nDryToolingCore.AbstractGasThermo\nDryToolingCore.AbstractSolidThermo\nDryToolingCore.AbstractSolidMaterial\nDryToolingCore.AbstractMixtureSubstance\nDryToolingCore.AbstractMixturePhase\nDryToolingCore.AbstractKineticsMechanism","category":"page"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractTransportModel","page":"Abstract types","title":"DryToolingCore.AbstractTransportModel","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractSolidTransport","page":"Abstract types","title":"DryToolingCore.AbstractSolidTransport","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractGasThermo","page":"Abstract types","title":"DryToolingCore.AbstractGasThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractSolidThermo","page":"Abstract types","title":"DryToolingCore.AbstractSolidThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractSolidMaterial","page":"Abstract types","title":"DryToolingCore.AbstractSolidMaterial","text":"Base type for solid materials.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractMixtureSubstance","page":"Abstract types","title":"DryToolingCore.AbstractMixtureSubstance","text":"Base type for simplified mixture substances.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractMixturePhase","page":"Abstract types","title":"DryToolingCore.AbstractMixturePhase","text":"Base type for simplified mixture phases.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractKineticsMechanism","page":"Abstract types","title":"DryToolingCore.AbstractKineticsMechanism","text":"Base type for coded kinetics mechanisms.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#Finite-volume-method-and-relatives","page":"Abstract types","title":"Finite volume method and relatives","text":"","category":"section"},{"location":"DryToolingCore/abstract/","page":"Abstract types","title":"Abstract types","text":"DryToolingCore.AbstractDiffusionModel1D\nDryToolingCore.AbstractGrid1D","category":"page"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractDiffusionModel1D","page":"Abstract types","title":"DryToolingCore.AbstractDiffusionModel1D","text":"Base type for diffusion (heat, species, ...) models.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingCore/abstract/#DryToolingCore.AbstractGrid1D","page":"Abstract types","title":"DryToolingCore.AbstractGrid1D","text":"Base type of one-dimensional grids.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingGranular/validation/kramers-model/#Kramers'-model","page":"Kramers' model","title":"Kramers' model","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"using CairoMakie\nusing CSV\nusing DataFrames\nusing Latexify\nusing Printf\nusing DryToolingGranular\n\n\"Partial data from Kramers (1952) Table 3\"\nconst DATA_TABLE3 = \"\"\"\\\nρ,γ,tan(β),n,ṁ,prod_dimless,η̄ᵣ,hold_real\n1480.0,36.0,0.0094,0.059,5.15e-03,18.3,0.111,8.10\n1480.0,36.0,0.0094,0.090,2.68e-03,6.25,0.054,5.00\n1480.0,36.0,0.0094,0.195,1.32e-02,14.2,0.088,7.75\n1480.0,36.0,0.0094,0.232,7.24e-03,6.55,0.043,3.85\n1480.0,36.0,0.0100,0.040,6.38e-03,29.7,0.169,13.3\n1480.0,36.0,0.0100,0.040,5.00e-03,23.2,0.144,11.2\n1480.0,36.0,0.0100,0.069,9.20e-03,24.8,0.150,10.6\n1480.0,36.0,0.0100,0.069,6.53e-03,17.6,0.113,8.50\n1480.0,36.0,0.0100,0.106,1.50e-02,27.8,0.162,12.2\n1480.0,36.0,0.0100,0.159,1.20e-02,14.0,0.092,7.49\n1480.0,36.0,0.0100,0.238,1.55e-02,12.1,0.083,7.48\n1480.0,36.0,0.0100,0.238,1.19e-02,9.22,0.068,6.13\n\"\"\"\n\n\"Compares approximate analytical to numerical solution.\"\nfunction solvekiln(; L, D, Φ, ω, β, γ, d, show = true)\n    model = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = D / 2.0,\n        Φ     = Φ / 3600.0,\n        ω     = ω / 60.0,\n        β     = deg2rad(β),\n        γ     = deg2rad(γ),\n        d     = d / 1000.0\n    )\n\n    optim = kramersnlapprox(;\n        z = model.z,\n        R = D / 2.0,\n        Φ = Φ / 3600.0,\n        ω = ω / 60.0,\n        β = deg2rad(β),\n        γ = deg2rad(γ),\n        d = d / 1000.0\n    )\n\n    f = nothing\n    ax = nothing\n\n    if show\n        f = Figure()\n        ax = Axis(f[1, 1])\n\n        lines!(ax, 100model.z/L, 100model.h, linewidth = 3, label = \"Numerical\")\n        lines!(ax, 100optim.z/L, 100optim.h, linewidth = 3, label = \"Analytical\")\n\n        a = @sprintf(\"%.1f\", model.ηₘ)\n        b = @sprintf(\"%.1f\", optim.ηₘ)\n        title = \"Loading: $(a)% (numerical) | $(b)% (analytical)\"\n\n        ax.title = title\n        ax.xlabel = \"Coordinate [%]\"\n        ax.ylabel = \"Bed height [cm]\"\n        ax.xticks = 0.0:20.0:100.0\n        xlims!(ax, extrema(ax.xticks.val))\n    end\n\n    return model, optim, f, ax\nend\n\n\"Reference case for alumina kiln testing.\"\nfunction aluminakiln(ṁ, ω; show = false)\n    # Density of bed [kg/m³]\n    ρ = 800.0\n    L = 34.0\n    D = 1.5\n    β = atan(0.025)\n\n    model, optim, f, ax = solvekiln(\n        L = L,\n        D = D,\n        Φ = (1000// 24) * ṁ / ρ,\n        ω = ω,\n        β = rad2deg(β),\n        γ = 33.0,\n        d = 0.050,\n        show = show\n    )\n\n    τₚ = perrayresidence(L, ω, D, β)\n\n    return model, optim, f, ax, τₚ\nend\n\n\"Run `aluminakiln` against some known conditions.\"\nfunction scanaluminakiln()\n    ṁlist = [33.6, 43.2]\n    ωlist = [0.85, 1.20]\n\n    df = DataFrame(\n        ṁ = Float64[],\n        ω = Float64[],\n        η̄ = Float64[],\n        τᵢ = Float64[],\n        τₚ = Float64[]\n    )\n\n    for ṁ ∈ ṁlist, ω ∈ ωlist\n        model, _, _, _, τ = aluminakiln(ṁ, ω, show = false)\n        η̄ = round(model.ηₘ, digits = 0)\n        τᵢ = round(model.τ / 60.0, digits = 0)\n        τₚ = round(τ, digits = 0)\n        push!(df, [ṁ ω η̄ τᵢ τₚ])\n    end\n\n    return df\nend\n\nlet\n    # @info(\"Solution of reference case\")\n\n    in1_to_m1(v) = 0.0254 * v\n    ft1_to_m1(v) = in1_to_m1(12.0) * v\n    ft3_to_m3(v) = ft1_to_m1(1.0)^3 * v\n\n    # Kiln length [m]\n    L = ft1_to_m1(45.0)\n\n    # Kiln diameter [m]\n    D = 2 * ft1_to_m1(3.1)\n\n    # Volume flow rate [m³/h]\n    Φ = ft3_to_m3(6.1) * 60\n\n    # Rotation rate (+0.0005) [rev/min]\n    ω = 0.0505 * 60.0\n\n    # Kiln slope (0.5in/ft) [°]\n    β = rad2deg(atan(0.5 / 12))\n\n    # Repose angle [°]\n    γ = 45.0\n\n    # Particle size [mm]\n    d = 0.050\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n    d = d / 1000.0\n\n    # Create problem container.\n    kramers = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = R,\n        Φ     = Φ,\n        ω     = ω,\n        β     = β,\n        γ     = γ,\n        d     = d\n    )\n\n    optim = kramersnlapprox(;\n        z = kramers.z,\n        R = R,\n        Φ = Φ,\n        ω = ω,\n        β = β,\n        γ = γ,\n        d = d\n    )\n\n    global kramers_NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    global kramers_Nₖ = dimlessNₖ(L, R, β, γ)\n    global kramers_η̄ₛ = sullivansηₘ(R, β, ω, Φ, γ)\n    global kramers_ref = kramers\n    global optim_ref = optim\n\n    global RESULTS_TABLE = DataFrame(\n        Quantity  = [\n            \"NΦ\",\n            \"Nₖ\",\n            \"η̄ᵣ\",\n            \"η̄ᵢ\",\n        ],\n        Reference = [\n            \"1.15\",\n            \"1.17\",\n            \"5.65\",\n            @sprintf(\"%.2f\", optim_ref.ηₘ)\n        ],\n        Computed  = [\n            @sprintf(\"%.2f\", kramers_NΦ),\n            @sprintf(\"%.2f\", kramers_Nₖ),\n            @sprintf(\"%.2f\", kramers_η̄ₛ),\n            @sprintf(\"%.2f\", kramers_ref.ηₘ)\n        ]\n    )\nend\n\nconst TABLE3 = let\n    # @info(\"Verification of *Table 3*\")\n\n    Dₖ = 0.197\n    Lₖ = 1.780\n    dₖ = 0.0012\n\n    table3 = DataFrame(CSV.File(IOBuffer(DATA_TABLE3)))\n    table3[!, \"η̄ᵢ\"] = zeros(length(table3[!, \"η̄ᵣ\"]))\n    table3[!, \"η̄ᵣ\"] *= 100\n\n    model = SymbolicLinearKramersModel()\n\n    for (i, row) in enumerate(eachrow(table3))\n        Φ = 3600.0 * row[\"ṁ\"] / row[\"ρ\"]\n        ω = row[\"n\"] * 60.0\n        β = rad2deg(atan(row[\"tan(β)\"]))\n        γ = row[\"γ\"]\n\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = Lₖ,\n            R     = Dₖ / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = dₖ / 1000.0\n        )\n\n        table3[i, \"η̄ᵢ\"] = round(kramers.ηₘ, digits = 1)\n    end\n\n    exclude = [\"ρ\", \"γ\", \"prod_dimless\", \"hold_real\"]\n    select(table3, Not(exclude))\nend\n\nconst DIMLESSPLOT = let\n    @info(\"Dimensionless profiles solution\")\n\n    ρ = 1480.0\n    L = 20.0\n    D = 0.197\n    Φ = 5.15e-03 / ρ * 3600\n    ω = 0.059 * 60\n    β = rad2deg(atan(0.0094))\n    γ = 36.0\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n\n    # Things held constant in loop.\n    NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    Nₖ = dimlessNₖ(L, R, β, γ)\n    model = SymbolicLinearKramersModel()\n\n    f = Figure()\n    ax = Axis(f[1, 1])\n\n    for d in [0.05, 0.10, 0.15, 0.193, 0.25]\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = L,\n            R     = R,\n            Φ     = Φ,\n            ω     = ω,\n            β     = β,\n            γ     = γ,\n            d     = d * R * NΦ\n        )\n\n        # Dimensionless axes.\n        z = kramers.z\n        h = kramers.h / (R * NΦ)\n        z = @. (L - z) / L * 1 / (NΦ * Nₖ)\n        z = @. z[1] - z\n\n        label = @sprintf(\"%.3f\", d)\n        lines!(ax, z, h; linewidth = 2, label = label)\n    end\n\n    ax.title = \"Dimensionless loading curves\"\n    ax.xlabel = \"Coordinate\"\n    ax.ylabel = \"Bed height\"\n    ax.xticks.val = 0.0:0.1:0.5\n    ax.yticks.val = 0.05:0.05:0.25\n    xlims!(ax, extrema(ax.xticks.val))\n    ylims!(ax, extrema(ax.yticks.val))\n    axislegend(ax; position = :rb)\n\n    f\nend","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/#Sample-reference-case","page":"Kramers' model","title":"Sample reference case","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"Here we make use of the current implementation to check if it correctly approximates the last example provided in reference paper from Kramers (1952). To minimize rounding errors causes by unit conversions, we provide the required functions to convert from imperial to international system in the solution process.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"The next table summarizes the results. It is seen that the dimensionless numbers are well approximated. It must be emphasized that the reference estimates η̄ᵣ by a graphical method – it was 1952 – and the current value is considered a good enough approximation. Additionally, the equation was not integrated numerically as done here, but engineering relationships were used in the approximation. That said, the proper loading to be considered in our days is η̄ᵢ.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(RESULTS_TABLE, latex=false) # hide","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"Note: the last value in column Reference above is not provided in Kramers' paper but computed from the approximate analytical solution provided by the authors. As we see here, it may get >20% error under some circumstances.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/#Verification-of-*Table-3*","page":"Kramers' model","title":"Verification of Table 3","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"In the next cell we provide the kiln dimensions used by Kramers (1952) to experimentally validate the model. Some data from their Tab. 3 is then loaded and all rows are simulated with current model. Fractional hold-up seems to be well correlated at least to a few percent of the reference value.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(TABLE3, latex=false) # hide","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/#Dimensionless-profiles","page":"Kramers' model","title":"Dimensionless profiles","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"Next step in validation is to check profiles in dimensionless format, as done by Kramers in their Fig. 3. Notice that here we used the numerical integration curves instead of the analytical approximation of profiles, so reproduction and consequences of results are not exactly the same.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"DIMLESSPLOT # hide","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/#Comparison-with-analytical","page":"Kramers' model","title":"Comparison with analytical","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"The final step in model validation is to compare the approximate analytical solution proposed by Kramers and the results of numerical integration. It is worth mentioning that numerical integration remains the recommended method because one does not need to verify the ranges of validity of analytical approximation for every use case.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"let                                    # hide\n    _, _, f, ax = solvekiln(           # hide\n        L = 10.0,                      # hide\n        D = 1.0,                       # hide\n        Φ = 1.0,                       # hide\n        ω = 1.0,                       # hide\n        β = 3.0,                       # hide\n        γ = 45.0,                      # hide\n        d = 0.001                      # hide\n    )                                  # hide\n                                       # hide\n    ax.yticks = 0.0:4.0:20.0           # hide\n    ylims!(ax, extrema(ax.yticks.val)) # hide\n    f                                  # hide\nend                                    # hide","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/#Industrial-cases","page":"Kramers' model","title":"Industrial cases","text":"","category":"section"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"The following illustrates a practical use case of the model. Next we scan a parameter space to confirm once again the model suitability as an alternative to analytical engineering estimations as per Peray's notebook.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"let                                                 # hide\n    ṁ = 33.6                                        # hide\n    ω = 0.85                                        # hide\n    _, _, f, ax, _ = aluminakiln(ṁ, ω, show = true) # hide\n    ax.yticks = 0.0:6.0:30.0                        # hide\n    ylims!(ax, extrema(ax.yticks.val))              # hide\n    f                                               # hide\nend                                                 # hide","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"The following table confirms the expected values as per Peray.","category":"page"},{"location":"DryToolingGranular/validation/kramers-model/","page":"Kramers' model","title":"Kramers' model","text":"mdtable(scanaluminakiln(), latex=false) # hide","category":"page"},{"location":"#DryTooling.jl","page":"Home","title":"DryTooling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DryTooling.","category":"page"},{"location":"#Why?","page":"Home","title":"Why?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I am often faced with using the same approach for different engineering and scientific problems, but I don't like repeating the same task again and again. This is where DryTooling.jl comes in. By adopting some principles of DRY in Julia, to a larger extent than its definition, it packages together models and workflows that are not available or validated elsewhere - and in some cases adapts existing models. The tools will progressively cover a broad range of numerical applications and data treatment, this package is in its early days from the migration of my old Python scripts and packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also dry tooling is my favorite sport!","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The base case for using DryTooling is calling a pre-built model for solving a specific problem. Several sub-modules handle different Physics and find them in the side-bar. Most models are provided under structures that are already solved during construction or provide a solve! method. In an ideal world they should all be documented, but since this package is still in its early days, some experimental features are not yet documented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For extending existing models and preferrably contributing to the package's growth, it is possible to use some functionalities provided in the bare DryTooling module, i.e. those made available when calling using DryTooling. They include physical constants, abstract types used all across the package, and some simple functions of general use.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Found it useful? See CITATION.bib for the relevant reference.","category":"page"},{"location":"DryToolingCore/#DryToolingCore","page":"DryToolingCore","title":"DryToolingCore","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"CurrentModule = DryToolingCore\nDocTestSetup  = quote\n    using DryToolingCore\nend","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"The core package of DryTooling ecosystem provides shared functionalities and types that are used in several other more specialized packages. This allows for standardization of interfaces, employed quantities, and avoid boilerplate code. Rather than documenting the exposed functionalities in implemented order, this page organizes everything to facilitate the understanding of the end-user. Here you find the constants by multi-purpose functionalities. All abstract types were grouped in a dedicated page.","category":"page"},{"location":"DryToolingCore/#Physical-constants","page":"DryToolingCore","title":"Physical constants","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.GAS_CONSTANT\nDryToolingCore.ZERO_CELSIUS\nDryToolingCore.ONE_ATM\nDryToolingCore.STEFAN_BOLTZMANN","category":"page"},{"location":"DryToolingCore/#DryToolingCore.GAS_CONSTANT","page":"DryToolingCore","title":"DryToolingCore.GAS_CONSTANT","text":"Ideal gas constant [8.31446261815324 J mol^-1 K^-1].\n\n\n\n\n\n","category":"constant"},{"location":"DryToolingCore/#DryToolingCore.ZERO_CELSIUS","page":"DryToolingCore","title":"DryToolingCore.ZERO_CELSIUS","text":"Zero degrees Celsius in Kelvin [273.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"DryToolingCore/#DryToolingCore.ONE_ATM","page":"DryToolingCore","title":"DryToolingCore.ONE_ATM","text":"Atmospheric pressure at sea level [101325.0 Pa].\n\n\n\n\n\n","category":"constant"},{"location":"DryToolingCore/#DryToolingCore.STEFAN_BOLTZMANN","page":"DryToolingCore","title":"DryToolingCore.STEFAN_BOLTZMANN","text":"Stefan-Boltzmann constant [5.670374419e-8 W m^-2 K^-4]\n\n\n\n\n\n","category":"constant"},{"location":"DryToolingCore/#Haskell-like-array-slicing","page":"DryToolingCore","title":"Haskell-like array slicing","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"Those who know Haskell probably started learning it by manipulating lists with head and tail. Those functionalities are not available in Julia by default and array slicing - with an ugly syntax - is required. Since this is done often in the fields of application of DryTooling, both head and tail together with a body functions are available in its core. They are simple wrapers over the @view macro and work with both iterable types and arrays. The following snippet illustrates their usage.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> v = collect(1:4);\n\njulia> head(v) == [1; 2; 3]\ntrue\n\njulia> tail(v) == [2; 3; 4]\ntrue\n\njulia> body(v) == [2; 3]\ntrue","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"More examples are provided in the following documentation ahead of each of the functions.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> head(1:4)\n1:3\n\njulia> head([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 1:3) with eltype Int64:\n 1\n 2\n 3\n","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.head","category":"page"},{"location":"DryToolingCore/#DryToolingCore.head","page":"DryToolingCore","title":"DryToolingCore.head","text":"head(z)\n\nAccess view of array head. See also tail and body.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> tail([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 2:4) with eltype Int64:\n 2\n 3\n 4\njulia> tail(1:4)\n2:4","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.tail","category":"page"},{"location":"DryToolingCore/#DryToolingCore.tail","page":"DryToolingCore","title":"DryToolingCore.tail","text":"tail(z)\n\nAccess view of array tail. See also head and body.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> body([1, 2, 3, 4])\n2-element view(::Vector{Int64}, 2:3) with eltype Int64:\n 2\n 3\njulia> body(1:4)\n2:3","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.body","category":"page"},{"location":"DryToolingCore/#DryToolingCore.body","page":"DryToolingCore","title":"DryToolingCore.body","text":"body(z)\n\nAccess view of array body. See also  head and tail.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/#Handling-of-discontinuous-functions","page":"DryToolingCore","title":"Handling of discontinuous functions","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"Discontinuous functions are all over in real world applications. Whether they handle discrete signals sent to controllers or represent a material property change in the solution domain of a heat transfer simulation, they are often represented by a single or a composition of Heaviside step functions. Again, because its implementation is pretty simple and optimization routines require a differentiable form of this function, DryTooling implements heaviside and interval as proposed in this StackOverflow answer.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> heaviside(-1) == 0\ntrue\n\njulia> heaviside(-1.0) == 0.0\ntrue\n\njulia> heaviside(0.0) == 0.5\ntrue\n\njulia> heaviside(1.0) == 1.0\ntrue\n\njulia> interval(10; a = 0, b = 10) == 0.5\ntrue","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"We see below that heaviside also works on ranges","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> heaviside(-2:2)\n5-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.heaviside","category":"page"},{"location":"DryToolingCore/#DryToolingCore.heaviside","page":"DryToolingCore","title":"DryToolingCore.heaviside","text":"heaviside(t)\n\nProvides a Heaviside function compatible with automatic differentiation. This is a requirement for conceiving, e.g., model predictive controls with discontinuous functions under ModelingToolkit.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"By implementation inheritance that is also the case for interval:","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> interval(0:6; a = 2, b = 5)\n7-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0\n 0.5\n 0.0","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.interval","category":"page"},{"location":"DryToolingCore/#DryToolingCore.interval","page":"DryToolingCore","title":"DryToolingCore.interval","text":"interval(x; a=-Inf, b=Inf)\n\nReturns 1 if x  (a b), 1/2 for x = a  x = b, or 0.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"As it is the case for representation of specific heats using NASA7/NASA9 or Shomate polynomials, functions defined by parts with an specific change point are also required in physical modeling. To this end, a stepwise function can be established with makestepwise1d. If keyword differentialble = true, then the function makes use of the above interval and remains compatible with ModelingToolkit, for instance.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> f = makestepwise1d(x->x, x->x^2, 1.0; differentiable = true);\n\njulia> f(0:0.2:2.0)\n11-element Vector{Float64}:\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.44\n 1.9599999999999997\n 2.5600000000000005\n 3.24\n 4.0\n\njulia> using ModelingToolkit\n\njulia> @variables x\n1-element Vector{Num}:\n x\n\njulia> f(x); # Output is too long, try by yourself.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.makestepwise1d","category":"page"},{"location":"DryToolingCore/#DryToolingCore.makestepwise1d","page":"DryToolingCore","title":"DryToolingCore.makestepwise1d","text":"makestepwise1d(lo, hi, xc)\n\nCreates an univariate function that is composed of two parts, the first evaluated before a critical domain point xc, and the second above that value. This is often required, for instance, for the evaluation of NASA polynomials for thermodynamic properties. If differentiable, then the returned function is compatible with symbolic argument as required when using package ModelingToolkit, etc.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/#Rounding-numbers-and-automatic-axes","page":"DryToolingCore","title":"Rounding numbers and automatic axes","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"danger: Danger\nThis section documents functions that are used in a very unstable context and might evolve in the next commits until an stable interface is established.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"Simple rounding is not enough. Getting values that are rounded close to a power of a given number and rounded to floor or ceil is often the case. This is standardized in DryTooling through closestpowerofx:","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> closestpowerofx(10)\n10\n\njulia> closestpowerofx(11)\n20\n\njulia> closestpowerofx(11, roundf = floor)\n10\n\njulia> closestpowerofx(11, x = 5, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10)\n20\n\njulia> closestpowerofx(12.0; x = 10, roundf = floor)\n10\n\njulia> closestpowerofx(12.0; x = 10, roundf = round)\n10","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.closestpowerofx","category":"page"},{"location":"DryToolingCore/#DryToolingCore.closestpowerofx","page":"DryToolingCore","title":"DryToolingCore.closestpowerofx","text":"closestpowerofx(\n    v::Number;\n    x::Number = 10,\n    roundf::Function = ceil\n)::Int64\n\nCompute the integer power of x closest to v using roundf as rouding method. This might be useful for automatic setting more reasonable limits to plot axis or similar applications. Changing the rouding method through roundf is also possible.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"Below we illustrate the usage of axesunitscaler.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"NOTE: this function is not yet stable. In the future it will instead return labels using symbols like k, M, G, etc., for the units through a flag provided by the user.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"julia> axesunitscaler(1)\n(\"\", 1)\n\njulia> axesunitscaler(1000)\n(\"[×1000]\", 1000)\n\njulia> axesunitscaler(1000000)\n(\"[×1000000]\", 1000000)","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.axesunitscaler","category":"page"},{"location":"DryToolingCore/#DryToolingCore.axesunitscaler","page":"DryToolingCore","title":"DryToolingCore.axesunitscaler","text":"axesunitscaler(x::Number)::Tuple{String, Int64}\n\nFind scaling factor for multiples of 1000 units. Together with closestpowerofx this can be used to produce better automatic plot axes limits. The returned values provide the string for modifying the axis label and the associated scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/#Computation-of-changes-and-residuals","page":"DryToolingCore","title":"Computation of changes and residuals","text":"","category":"section"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"danger: Danger\nThis section documents functions that are used in a very unstable context and might evolve in the next commits until an stable interface is established.","category":"page"},{"location":"DryToolingCore/","page":"DryToolingCore","title":"DryToolingCore","text":"DryToolingCore.maxabsolutechange\nDryToolingCore.maxrelativechange","category":"page"},{"location":"DryToolingCore/#DryToolingCore.maxabsolutechange","page":"DryToolingCore","title":"DryToolingCore.maxabsolutechange","text":"Maximum absolute change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingCore/#DryToolingCore.maxrelativechange","page":"DryToolingCore","title":"DryToolingCore.maxrelativechange","text":"Maximum relative change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/#DryToolingGranular","page":"Granular","title":"DryToolingGranular","text":"","category":"section"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"CurrentModule = DryToolingGranular\nDocTestSetup  = quote\n    using Statistics\n    using DryToolingGranular\nend","category":"page"},{"location":"DryToolingGranular/#General-porous-media","page":"Granular","title":"General porous media","text":"","category":"section"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Modeling of geometrical characteristics of porous beds is required for including both their thermal effect or role over chemistry in chemical reactors. A classical approach used in several commercial and open source tools is that of Gunn [1]. In what follows we develop the ideas that lead to an analogous model which is implemented by this structure.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"To build the model we will assume a reactor of constant rectangular cross-section A_r=bw and volume V_R=bwh. Its cross-section perimeter is then P_R=2(b+w). Inside this reactor we randomly pack cubic particles beta of surface area A_beta=6l_beta^2 and volume V_beta=l_beta^3 at a porosity level phi. Thus the total volume of solids inside the reactor is V_S=(1-phi)V_R and the approximate number of particles N=fracV_SV_beta. Following a similar reasoning the total surface area of particles is A_S=NA_beta. Performing all the substitutions so far one finds the following expression","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"A_S=frac6(1-phi)bwhl_beta","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Since the differential dA=Pdl holds for the surface of a body over its length l, one can divide the above expression by the reactor length to get the perimeter of particles in a cross-section. We can further divide by the cross-section area itself and find the perimeter density which is a more general result, and find the expression proposed by Gunn [1]. This result is summarized in the next equation where the subscript of particle size was dropped for generality.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"P = frac6(1-phi)l","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"An estimator of the number of channels per unit cross-section of reactor N can be related to the porosity through NpiR^2=phi. Because the above perimeter is shared between the fluid volume and solids, it holds that N2piR=P. Using these expressions one can solve for the porosity channels characteristic radius R as given below, which is also a result reported by Gunn [1].","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"R=fracphil3(1-phi)","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"This model is probided in PackedBedPorosityDescriptor.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"DryToolingGranular.PackedBedPorosityDescriptor","category":"page"},{"location":"DryToolingGranular/#DryToolingGranular.PackedBedPorosityDescriptor","page":"Granular","title":"DryToolingGranular.PackedBedPorosityDescriptor","text":"Provides description of porosity parameters with stochastic behavior.\n\nϕ::Union{Float64, Vector{Float64}}: Porosity volume fraction in medium [-].\nl::Union{Float64, Vector{Float64}}: Characteristic particle size in medium [m].\nσϕ::Union{Nothing, Float64}: Optional standard deviation of porosity volume fraction  [-].\nσl::Union{Nothing, Float64}: Optional standard deviation of characteristic particle size [m].\nP::Union{Float64, Vector{Float64}}: Perimeter in reactor cross-section [m].\nD::Union{Float64, Vector{Float64}}: Characteristic diameter of porosity channels [m].\nA::Float64: Reactor area used for scaling perimeter [m²].\n\n\n\n\n\n","category":"type"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"PackedBedPorosityDescriptor can be used to describe the geometry of exchange section of a packed bed for a single set of arguments.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"julia> PackedBedPorosityDescriptor(; ϕ = 0.65, l = 0.10, area = 1.0)\nPackedBedPorosityDescriptor(P = 21.000000 m, D = 0.123810 m)","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"It can also be used to describe randomly varying reactors, what is a more realistic thing to do when using this structure to simulate real world systems.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"julia> PackedBedPorosityDescriptor(;\n            ϕ  = 0.65, l  = 0.10,\n            σϕ = 0.03, σl = 0.01,\n            N = 2,\n            ϕlims = (0.4, 0.8),\n            llims = (0.0, 0.3),\n            seed = 42,\n            area = 1.0\n        )\nPackedBedPorosityDescriptor(\n    P from  21.455749 m to  24.370742 m\n    D from   0.125589 m to   0.102353 m\n)","category":"page"},{"location":"DryToolingGranular/#Rotary-kiln-models","page":"Granular","title":"Rotary kiln models","text":"","category":"section"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"In a rotary kiln as proposed by Kramers and Croockewite (1952) [2]. Its goal is to be used as a process support tool or to integrate more complex models requiring integration of the bed profile. In its classical statement, the bed height profile h(z) can be evaluated from volume of flowing material conservation through the following equations. Coordinate z=0 represents the discharge position where initial condition must be applied. This is given by the dam height, if any, or particle size.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"beginaligned\ndfracdhdz = C₁ leftfrachRleft(2 - frachRright)right^-frac32 - C₂6pt\nC₁             = frac34dfracΦtanγπ R^3 ω6pt\nC₂             = dfractanβcosγ\nendaligned","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"The structure SymbolicLinearKramersModel implements the Kramers' ordinary differential equation for prediction of bed height profile in a rotary kiln. This equation is implemented under the formalism of ModelingToolkit.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"DryToolingGranular.SymbolicLinearKramersModel","category":"page"},{"location":"DryToolingGranular/#DryToolingGranular.SymbolicLinearKramersModel","page":"Granular","title":"DryToolingGranular.SymbolicLinearKramersModel","text":"Creates a reusable linear Kramers model for rotary kiln simulation.\n\nR::Symbolics.Num: Symbolic kiln internal radius\nΦ::Symbolics.Num: Symbolic kiln feed rate\nω::Symbolics.Num: Symbolic kiln rotation rate\nβ::Symbolics.Num: Symbolic kiln slope\nγ::Symbolics.Num: Symbolic solids repose angle\nz::Symbolics.Num: Symbolic kiln axial coordinates\nh::Symbolics.Num: Symbolic bed height profile\nsys::ModelingToolkit.ODESystem: Problem ordinary differential equation\n\n\n\n\n\n","category":"type"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"For integration of this model we implement RotaryKilnBedSolution. It provides the solved description of a rotary kiln bed geometry computed from the solution of bed height along the kiln length. The main goal of the quantities computed here is their use with heat and mass transfer models for the simulation of rotary kiln process. A simple post-processing utilitiy plotlinearkramersmodel is also provided.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"DryToolingGranular.RotaryKilnBedSolution\nDryToolingGranular.plotlinearkramersmodel","category":"page"},{"location":"DryToolingGranular/#DryToolingGranular.RotaryKilnBedSolution","page":"Granular","title":"DryToolingGranular.RotaryKilnBedSolution","text":"General geometric description of a bed from Kramers equation solution.\n\nz::Vector{Float64}: Solution coordinates [m]\nh::Vector{Float64}: Solution bed height [m]\nθ::Vector{Float64}: View angle from kiln center [rad]\nl::Vector{Float64}: Bed-freeboard cord length [m]\nA::Vector{Float64}: Local bed cross section area [m²]\nη::Vector{Float64}: Local loading based on height [-]\nηₘ::Float64: Mean loading of kiln [%]\nV::Float64: Bed integral volume [m³]\nτ::Float64: Residence time of particles\nβ::Float64: Kiln slope [rad]\n\nArguments\n\nInternal elements are initialized through the following constructor:\n\nRotaryKilnBedSolution(z, h, β, R, Φ)\n\nWhere parameters are given as:\n\nz: solution coordinates over length, [m].\nh: bed profile solution over length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\n\nAn outer constructor is also provided for managing the integration of an instance of SymbolicLinearKramersModel. This is the recommended usage that is illustrated below.\n\nImportant: inputs must be provided in international system (SI) units as a better physical practice. The only exception is the rotation rate ω provided in revolution multiples. If the discharge end is held by a dam, its height must be provided instead of the particle size, as it is used as the ODE initial condition.\n\nmodel: a symbolic kiln model.\nL: kiln length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\nω: kiln rotation rate, [rev/s].\nβ: kiln slope, [rad].\nγ: solids repose angle, [rad].\nd: particle size or dam height, [m].\nsolver: Solver for DifferentialEquations. Defaults to Tsit5.\nrtol: Relative integration tolerance. Defaults to 1.0e-08.\natol: Absolute integration tolerance. Defaults to 1.0e-08.\n\n\n\n\n\n","category":"type"},{"location":"DryToolingGranular/#DryToolingGranular.plotlinearkramersmodel","page":"Granular","title":"DryToolingGranular.plotlinearkramersmodel","text":"plotlinearkramersmodel(\n    model::RotaryKilnBedSolution;\n    normz::Bool = false,\n    normh::Bool = false\n)::Figure\n\nStandardized plotting of RotaryKilnBedSolution bed profile. It supports normalization of axes throught keywords normz for axial coordinate and normh for bed depth.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Data in next example is an SI conversion of an example from Kramers and Croockewite (1952) [2].","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"julia> L = 13.715999999999998;  # Kiln length [m]\n\njulia> D = 1.8897599999999999;  # Kiln diameter [m]\n\njulia> β = 2.3859440303888126;  # Kiln slope [°]\n\njulia> γ = 45.0;                # Repose angle [°]\n\njulia> d = 1.0;                 # Particle/dam size [mm]\n\njulia> Φ = 10.363965852671996;  # Feed rate [m³/h]\n\njulia> ω = 3.0300000000000002;  # Rotation rate [rev/min]\n\njulia> bed = RotaryKilnBedSolution(;\n            model = SymbolicLinearKramersModel(),\n            L     = L,\n            R     = D / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = d / 1000.0\n        );\n\njulia> bed\nRotaryKilnBedSolution(τ = 13.169938 min, ηₘ = 5.913271 %)\n\njulia> bed.τ\n790.1963002204092","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"In the following dummy example we force a very thick analytical bed solution, filling the radius of the rotary drum. ","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"julia> R = 1.0e+00;\n\njulia> Φ = 1.0e-02;\n\njulia> z = collect(0.0:0.1:10.0);\n\njulia> h = R * ones(size(z));\n\njulia> Aₐ = π * R^2 / 2;\n\njulia> Vₐ = Aₐ * z[end];\n\njulia> bed = RotaryKilnBedSolution(z, h, 0, R, Φ)\nRotaryKilnBedSolution(τ = 26.179939 min, ηₘ = 50.000000 %)","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Next we confirm the internal evaluations of the model match the expected analytical values.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"julia> mean(bed.θ) ≈ π\ntrue\n\njulia> mean(bed.l) ≈ 2R\ntrue\n\njulia> mean(bed.A) ≈ Aₐ\ntrue\n\njulia> mean(bed.η) ≈ 0.5\ntrue\n\njulia> bed.ηₘ ≈ 50.0\ntrue\n\njulia> bed.V ≈ Vₐ\ntrue\n\njulia> bed.τ ≈ Vₐ / Φ\ntrue","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Validation of Kramers' model is provided here.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"Finally a set of basic equations provided for process analysis.","category":"page"},{"location":"DryToolingGranular/","page":"Granular","title":"Granular","text":"DryToolingGranular.sullivansηₘ\nDryToolingGranular.dimlessNΦ\nDryToolingGranular.dimlessNₖ\nDryToolingGranular.perrayresidence\nDryToolingGranular.kramersnlapprox","category":"page"},{"location":"DryToolingGranular/#DryToolingGranular.sullivansηₘ","page":"Granular","title":"DryToolingGranular.sullivansηₘ","text":"Sullivans approximation to kiln filling.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/#DryToolingGranular.dimlessNΦ","page":"Granular","title":"DryToolingGranular.dimlessNΦ","text":"Kramers (1952) dimensionless group NΦ.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/#DryToolingGranular.dimlessNₖ","page":"Granular","title":"DryToolingGranular.dimlessNₖ","text":"Kramers (1952) dimensionless group Nₖ.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/#DryToolingGranular.perrayresidence","page":"Granular","title":"DryToolingGranular.perrayresidence","text":"Compute residence time from Peray's equation.\n\n\n\n\n\n","category":"function"},{"location":"DryToolingGranular/#DryToolingGranular.kramersnlapprox","page":"Granular","title":"DryToolingGranular.kramersnlapprox","text":"Nonlinear formulation of Kramers model approximate solution.\n\n\n\n\n\n","category":"function"}]
}
